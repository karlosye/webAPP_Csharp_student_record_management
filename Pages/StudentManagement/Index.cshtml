@page
@model lab4.Pages.StudentManagement.IndexModel

@{
    ViewData["Title"] = "Index - Student Management";

    var studentAverageMapping = new System.Collections.Hashtable();

    foreach (var student in Model.StudentsList)
    {
        int sumGrade = 0;

        foreach (var AcademicRecord in Model.AcademicRecordsList)
        {
            if (student.Id == AcademicRecord.StudentId) { sumGrade = sumGrade + (int)AcademicRecord.Grade!; }
        }

        var avgGrade = student.AcademicRecords.Count == 0 ? 0 : (sumGrade / student.AcademicRecords.Count);

        studentAverageMapping.Add(student.Name , avgGrade);
    }
}

<h1>Index</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-page="Index" asp-route-orderby="studentName">Name</a>
            </th>
            <th>
                <a asp-page="Index" asp-route-orderby="numberOfCourses">Number of Courses</a>
            </th>
            <th>
                <a asp-page="Index" asp-route-orderby="averageGrade">Avg. Grade</a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{
            
            if (Model.OrderBy == "studentName") {

                Model.StudentsList.Sort( (student1, student2) => student1.Name.CompareTo(student2.Name) );
            }

            if (Model.OrderBy == "numberOfCourses") {

                Model.StudentsList.Sort( (student1, student2) => student1.AcademicRecords.Count.CompareTo(student2.AcademicRecords.Count) );
            }

            if (Model.OrderBy == "averageGrade") {

                Model.StudentsList = Model.StudentsList.OrderBy(student => studentAverageMapping[student.Name]).ToList();
                //Model.StudentsList.Sort( (student1, student2)  =>  double.Compare(studentAverageMapping[student1.Name], studentAverageMapping[student2.Name]));
            }
        }

        @foreach (var item in Model.StudentsList) {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.AcademicRecords.Count)
                    </td>
                    <td>
                            @*
                            @{
                                int sumGrade = 0;

                                foreach (var AcademicRecord in item.AcademicRecords)
                                {
                                    if (item.Id == AcademicRecord.StudentId) { sumGrade = sumGrade + (int)AcademicRecord.Grade!; }
                                }

                                var avgGrade = item.AcademicRecords.Count == 0 ? 0 : (sumGrade / item.AcademicRecords.Count);
                            }
                            @Html.Raw(avgGrade) *@
                        @Html.Raw(studentAverageMapping[item.Name])
                    </td>
                    <td>
                        <a asp-page="./Details" asp-route-id="@item.Id">Details</a>
                        <a asp-route-id="@item.Id" class="delete-btn" id="@item.Name" asp-for="@item.Name">Delete</a>
                    </td>
                </tr>
        }
    </tbody>
</table>

@section Scripts {

<script type="text/javascript">

    let deleteBtnList = document.querySelectorAll(".delete-btn");
    
    for(let i=0; i<deleteBtnList.length; i++) {

        deleteBtnList[i].addEventListener("click", function(e){

                let answer = confirm(`Please confirm to delete student: \n\n${deleteBtnList[i].id}\n\nAll his/her acaedmic records will be deleted too!`);
                
                if (!answer) {
                    e.preventDefault();

                } else {

                }
           }   
        )
    }

</script>

}
